{"version":3,"sources":["http-common.js","services/todo.service.js","components/add-todo.component.js","components/todo.component.js","components/todos-list.component.js","App.js","serviceWorker.js","index.js"],"names":["axios","create","baseURL","headers","http","get","id","data","post","put","delete","category","AddTodo","props","onChangeCategory","bind","onChangeDescription","saveTodo","newTodo","state","description","published","submitted","e","this","setState","target","value","TodoDataService","then","response","console","log","catch","className","onClick","htmlFor","type","required","onChange","name","Component","Todo","getTodo","updatePublished","updateTodo","deleteTodo","currentTodo","message","match","params","prevState","status","update","history","push","TodosList","onChangeSearchCategory","retrieveTodos","refreshList","setActiveTodo","removeAllTodos","searchCategory","todos","currentIndex","getAll","todo","index","deleteAll","findByCategory","placeholder","map","to","App","href","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.b8b8f0af.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport default axios.create({\r\n  baseURL: \"http://todo-app-nodejs-mysql.herokuapp.com/api\",\r\n  headers: {\r\n    \"Content-type\": \"application/json\"\r\n  }\r\n});","import http from \"../http-common\";\r\n\r\nclass TodoDataService {\r\n  getAll() {\r\n    return http.get(\"/todos\");\r\n  }\r\n\r\n  get(id) {\r\n    return http.get(`/todos/${id}`);\r\n  }\r\n\r\n  create(data) {\r\n    return http.post(\"/todos\", data);\r\n  }\r\n\r\n  update(id, data) {\r\n    return http.put(`/todos/${id}`, data);\r\n  }\r\n\r\n  delete(id) {\r\n    return http.delete(`/todos/${id}`);\r\n  }\r\n\r\n  deleteAll() {\r\n    return http.delete(`/todos`);\r\n  }\r\n\r\n  findByCategory(category) {\r\n    return http.get(`/todos?category=${category}`);\r\n  }\r\n}\r\n\r\nexport default new TodoDataService();","import React, { Component } from \"react\";\r\nimport TodoDataService from \"../services/todo.service\";\r\n\r\nexport default class AddTodo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeCategory = this.onChangeCategory.bind(this);\r\n    this.onChangeDescription = this.onChangeDescription.bind(this);\r\n    this.saveTodo = this.saveTodo.bind(this);\r\n    this.newTodo = this.newTodo.bind(this);\r\n\r\n    this.state = {\r\n      id: null,\r\n      category: \"\",\r\n      description: \"\", \r\n      published: false,\r\n\r\n      submitted: false\r\n    };\r\n  }\r\n\r\n  onChangeCategory(e) {\r\n    this.setState({\r\n      category: e.target.value\r\n    });\r\n  }\r\n\r\n  onChangeDescription(e) {\r\n    this.setState({\r\n      description: e.target.value\r\n    });\r\n  }\r\n\r\n  saveTodo() {\r\n    var data = {\r\n      category: this.state.category,\r\n      description: this.state.description\r\n    };\r\n\r\n    TodoDataService.create(data)\r\n      .then(response => {\r\n        this.setState({\r\n          id: response.data.id,\r\n          category: response.data.category,\r\n          description: response.data.description,\r\n          published: response.data.published,\r\n\r\n          submitted: true\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  newTodo() {\r\n    this.setState({\r\n      id: null,\r\n      category: \"\",\r\n      description: \"\",\r\n      published: false,\r\n\r\n      submitted: false\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"submit-form\">\r\n          {this.state.submitted ? (\r\n            <div>\r\n              <h4>Todo submitted successfully!</h4>\r\n              <button className=\"btn btn-success\" onClick={this.newTodo}>\r\n                Add\r\n              </button>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"category\">Category</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"category\"\r\n                  required\r\n                  value={this.state.category}\r\n                  onChange={this.onChangeCategory}\r\n                  name=\"category\"\r\n                />\r\n              </div>\r\n  \r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"description\">Description</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"description\"\r\n                  required\r\n                  value={this.state.description}\r\n                  onChange={this.onChangeDescription}\r\n                  name=\"description\"\r\n                />\r\n              </div>\r\n  \r\n              <button onClick={this.saveTodo} className=\"btn btn-success\">\r\n                Submit\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      );\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport TodoDataService from \"../services/todo.service\";\r\n\r\nexport default class Todo extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeCategory = this.onChangeCategory.bind(this);\r\n    this.onChangeDescription = this.onChangeDescription.bind(this);\r\n    this.getTodo = this.getTodo.bind(this);\r\n    this.updatePublished = this.updatePublished.bind(this);\r\n    this.updateTodo = this.updateTodo.bind(this);\r\n    this.deleteTodo = this.deleteTodo.bind(this);\r\n\r\n    this.state = {\r\n      currentTodo: {\r\n        id: null,\r\n        category: \"\",\r\n        description: \"\",\r\n        published: false\r\n      },\r\n      message: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getTodo(this.props.match.params.id);\r\n  }\r\n\r\n  onChangeCategory(e) {\r\n    const category = e.target.value;\r\n\r\n    this.setState(function(prevState) {\r\n      return {\r\n        currentTodo: {\r\n          ...prevState.currentTodo,\r\n          category: category\r\n        }\r\n      };\r\n    });\r\n  }\r\n\r\n  onChangeDescription(e) {\r\n    const description = e.target.value;\r\n    \r\n    this.setState(prevState => ({\r\n      currentTodo: {\r\n        ...prevState.currentTodo,\r\n        description: description\r\n      }\r\n    }));\r\n  }\r\n\r\n  getTodo(id) {\r\n    TodoDataService.get(id)\r\n      .then(response => {\r\n        this.setState({\r\n          currentTodo: response.data\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  updatePublished(status) {\r\n    var data = {\r\n      id: this.state.currentTodo.id,\r\n      category: this.state.currentTodo.category,\r\n      description: this.state.currentTodo.description,\r\n      published: status\r\n    };\r\n\r\n    TodoDataService.update(this.state.currentTodo.id, data)\r\n      .then(response => {\r\n        this.setState(prevState => ({\r\n          currentTodo: {\r\n            ...prevState.currentTodo,\r\n            published: status\r\n          }\r\n        }));\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  updateTodo() {\r\n    TodoDataService.update(\r\n      this.state.currentTodo.id,\r\n      this.state.currentTodo\r\n    )\r\n      .then(response => {\r\n        console.log(response.data);\r\n        this.setState({\r\n          message: \"The todo was updated successfully!\"\r\n        });\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  deleteTodo() {    \r\n    TodoDataService.delete(this.state.currentTodo.id)\r\n      .then(response => {\r\n        console.log(response.data);\r\n        this.props.history.push('/todos')\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { currentTodo } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        {currentTodo ? (\r\n          <div className=\"edit-form\">\r\n            <h4>Todo</h4>\r\n            <form>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"category\">Category</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"category\"\r\n                  value={currentTodo.category}\r\n                  onChange={this.onChangeCategory}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <label htmlFor=\"description\">Description</label>\r\n                <input\r\n                  type=\"text\"\r\n                  className=\"form-control\"\r\n                  id=\"description\"\r\n                  value={currentTodo.description}\r\n                  onChange={this.onChangeDescription}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <label>\r\n                  <strong>Status:</strong>\r\n                </label>\r\n                {currentTodo.published ? \"Completed\" : \"Pending\"}\r\n              </div>\r\n            </form>\r\n\r\n            {currentTodo.published ? (\r\n              <button\r\n                className=\"badge badge-primary mr-2\"\r\n                onClick={() => this.updatePublished(false)}\r\n              >\r\n                Mark Incomplete\r\n              </button>\r\n            ) : (\r\n              <button\r\n                className=\"badge badge-primary mr-2\"\r\n                onClick={() => this.updatePublished(true)}\r\n              >\r\n                Mark Complete\r\n              </button>\r\n            )}\r\n\r\n            <button\r\n              className=\"badge badge-danger mr-2\"\r\n              onClick={this.deleteTodo}\r\n            >\r\n              Delete\r\n            </button>\r\n\r\n            <button\r\n              type=\"submit\"\r\n              className=\"badge badge-success\"\r\n              onClick={this.updateTodo}\r\n            >\r\n              Update\r\n            </button>\r\n            <p>{this.state.message}</p>\r\n          </div>\r\n        ) : (\r\n          <div>\r\n            <br />\r\n            <p>Please click on a Todo...</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport TodoDataService from \"../services/todo.service\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nexport default class TodosList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.onChangeSearchCategory = this.onChangeSearchCategory.bind(this);\r\n    this.retrieveTodos = this.retrieveTodos.bind(this);\r\n    this.refreshList = this.refreshList.bind(this);\r\n    this.setActiveTodo = this.setActiveTodo.bind(this);\r\n    this.removeAllTodos = this.removeAllTodos.bind(this);\r\n    this.searchCategory = this.searchCategory.bind(this);\r\n\r\n    this.state = {\r\n      todos: [],\r\n      currentTodo: null,\r\n      currentIndex: -1,\r\n      searchCategory: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.retrieveTodos();\r\n  }\r\n\r\n  onChangeSearchCategory(e) {\r\n    const searchCategory = e.target.value;\r\n\r\n    this.setState({\r\n      searchCategory: searchCategory\r\n    });\r\n  }\r\n\r\n  retrieveTodos() {\r\n    TodoDataService.getAll()\r\n      .then(response => {\r\n        this.setState({\r\n          todos: response.data\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  refreshList() {\r\n    this.retrieveTodos();\r\n    this.setState({\r\n      currentTodo: null,\r\n      currentIndex: -1\r\n    });\r\n  }\r\n\r\n  setActiveTodo(todo, index) {\r\n    this.setState({\r\n      currentTodo: todo,\r\n      currentIndex: index\r\n    });\r\n  }\r\n\r\n  removeAllTodos() {\r\n    TodoDataService.deleteAll()\r\n      .then(response => {\r\n        console.log(response.data);\r\n        this.refreshList();\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  searchCategory() {\r\n    TodoDataService.findByCategory(this.state.searchCategory)\r\n      .then(response => {\r\n        this.setState({\r\n          todos: response.data\r\n        });\r\n        console.log(response.data);\r\n      })\r\n      .catch(e => {\r\n        console.log(e);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    const { searchCategory, todos, currentTodo, currentIndex } = this.state;\r\n\r\n    return (\r\n      <div className=\"list row\">\r\n        <div className=\"col-md-8\">\r\n          <div className=\"input-group mb-3\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              placeholder=\"Search by category\"\r\n              value={searchCategory}\r\n              onChange={this.onChangeSearchCategory}\r\n            />\r\n            <div className=\"input-group-append\">\r\n              <button\r\n                className=\"btn btn-outline-secondary\"\r\n                type=\"button\"\r\n                onClick={this.searchCategory}\r\n              >\r\n                Search\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          <h4>Todos List</h4>\r\n\r\n          <ul className=\"list-group\">\r\n            {todos &&\r\n              todos.map((todo, index) => (\r\n                <li\r\n                  className={\r\n                    \"list-group-item \" +\r\n                    (index === currentIndex ? \"active\" : \"\")\r\n                  }\r\n                  onClick={() => this.setActiveTodo(todo, index)}\r\n                  key={index}\r\n                >\r\n                  {todo.category}\r\n                </li>\r\n              ))}\r\n          </ul>\r\n\r\n          <button\r\n            className=\"m-3 btn btn-sm btn-danger\"\r\n            onClick={this.removeAllTodos}\r\n          >\r\n            Remove All\r\n          </button>\r\n        </div>\r\n        <div className=\"col-md-6\">\r\n          {currentTodo ? (\r\n            <div>\r\n              <h4>Todo</h4>\r\n              <div>\r\n                <label>\r\n                  <strong>Category:</strong>\r\n                </label>{\" \"}\r\n                {currentTodo.category}\r\n              </div>\r\n              <div>\r\n                <label>\r\n                  <strong>Description:</strong>\r\n                </label>{\" \"}\r\n                {currentTodo.description}\r\n              </div>\r\n              <div>\r\n                <label>\r\n                  <strong>Status:</strong>\r\n                </label>{\" \"}\r\n                {currentTodo.published ? \"Completed\" : \"Pending\"}\r\n              </div>\r\n\r\n              <Link\r\n                to={\"/todos/\" + currentTodo.id}\r\n                className=\"badge badge-warning\"\r\n              >\r\n                Edit\r\n              </Link>\r\n            </div>\r\n          ) : (\r\n            <div>\r\n              <br />\r\n              <p>Please click on a Todo...</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from \"react\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nimport AddTodo from \"./components/add-todo.component\";\nimport Todo from \"./components/todo.component\";\nimport TodosList from \"./components/todos-list.component\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n          <a href=\"/todos\" className=\"navbar-brand\">\n            To-do Application\n          </a>\n          <div className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <Link to={\"/todos\"} className=\"nav-link\">\n                Todos\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link to={\"/add\"} className=\"nav-link\">\n                Add\n              </Link>\n            </li>\n          </div>\n        </nav>\n\n        <div className=\"container mt-3\">\n          <Switch>\n            <Route exact path={[\"/\", \"/todos\"]} component={TodosList} />\n            <Route exact path=\"/add\" component={AddTodo} />\n            <Route path=\"/todos/:id\" component={Todo} />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n            return;\r\n        }\r\n\r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Let's check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl, config);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                    console.log(\r\n                        'This web app is being served cache-first by a service '\r\n                    );\r\n                });\r\n            } else {\r\n                // Is not localhost. Just register service worker\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        });\r\n    }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                if (installingWorker == null) {\r\n                    return;\r\n                }\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the updated precached content has been fetched,\r\n                            // but the previous service worker will still serve the older\r\n                            // content until all client tabs are closed.\r\n                            console.log(\r\n                                'New content is available and will be used when all '\r\n                            );\r\n\r\n                            // Execute callback\r\n                            if (config && config.onUpdate) {\r\n                                config.onUpdate(registration);\r\n                            }\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n\r\n                            // Execute callback\r\n                            if (config && config.onSuccess) {\r\n                                config.onSuccess(registration);\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n            headers: {\r\n                'Service-Worker': 'script'\r\n            },\r\n        })\r\n        .then(response => {\r\n            // Ensure service worker exists, and that we really are getting a JS file.\r\n            const contentType = response.headers.get('content-type');\r\n            if (\r\n                response.status === 404 ||\r\n                (contentType != null && contentType.indexOf('javascript') === -1)\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                    registration.unregister().then(() => {\r\n                        window.location.reload();\r\n                    });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl, config);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n\r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready\r\n            .then(registration => {\r\n                registration.unregister();\r\n            })\r\n            .catch(error => {\r\n                console.error(error.message);\r\n            });\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker.js\";\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.unregister();\n"],"sourceRoot":""}